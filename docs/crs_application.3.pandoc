% crs_application(3)

# NAME

crs_application -- Pastry applications

# SYNOPSIS

| **#include &lt;croissant.h&gt;**
|
| typedef uint32_t  **crs_application_id**;
|
| **struct crs_application**;
|
| struct crs_application \*
| **crs_application_new**(crs_application_id *id*, const char \**name*);
|
| void
| **crs_application_free**(struct crs_application \**app*);
|
| crs_application_id
| **crs_application_get_id**(const struct crs_application \**app*);
|
| const char \*
| **crs_application_get_name**(const struct crs_application \**app*);
|
| struct crs_node \*
| **crs_application_get_node**(const struct crs_application \**app*);
|
| void \*
| **crs_application_get_user_data**(const struct crs_application \**app*);
|
| void
| **crs_application_set_user_data**(struct crs_application \**app*,
|                               void \**user_data*,
|                               cork_free_f *free_user_data*);
|
| int
| **crs_node_add_application**(struct crs_node \**node*,
|                          struct crs_application \**app*);
|
| struct crs_application \*
| **crs_node_get_application**(struct crs_node \**node*,
|                          crs_application_id *id*);


# DESCRIPTION

A Pastry application is a collection of code running of the nodes of the overlay
network, providing some useful service to the network.  Each node that runs the
application will have some local state, and these per-node application instances
will communicate by sending messages to each other via the overlay network.

This per-node state and code is represented by a **crs_application** instance,
which defines how the local node should respond to any application messages that
are received (or seen in transit) by the local node.  Each application will also
present a higher-level, application-specific interface, which lets any other
code running on the local node access the services provided by the application.
This interface will use the local node's **crs_application** instance to send
and receive messages to provide those services.

Each application is identified by a **crs_application_id**, which is 32-bit
integer identifier.  Each application must have a globally unique identifier.
If you ever have to extend the capabilities of an application (by adding new
types of messages that it sends and responds to), each new version of the
application must also have a separate globally unique identifier.  When an
application sends a message over the overlay network, it is prefixed with this
application ID, which ensures that the receiving node can determine which local
**crs_application** instance to send the message to.

There is no central registry of application identifiers.  Instead, you should
generate a **crs_application_id** by computing the hash of a unique string that
identifies the application, using the **cork-hash**(1) command.  The convention
is to use the name of the C identifier for the code representing the
application, possibly followed by a versioning suffix.  For instance, Croissant
includes a test application that simplies prints out each message that it
receives.  This application is called `crs_print_message` in the C code, and so
its application ID is `0x9703f971`:

    $ cork-hash crs_print_message
    0x9703f971

If we were to add any new capabilites to this application, we'd need a new
application ID.  We'd add a version suffix to the name, resulting in
`crs_print_message:1`, and then hash that to get the new ID:

    $ cork-hash crs_print_message:1
    0xb1d28bcc

**crs_application_new**() creates a new **crs_application** instance with a
particular unique *id* and *name*.  **crs_application_free**() frees an
application instance.  The **crs_application_get** family of functions give you
access to the various properties of a **crs_application** instance.

After creating the application instance, you must also register several callback
functions, which define how the application will respond to certain events that
occur on the overlay network.  The most important of these is how the
application responds to messages that are delivered to the local node.  The
callbacks are described in more detail below.  You can add a custom *user_data*
object to the application instance using **crs_application_set_user_data**();
see **tac-callbacks**(7) for more details.  This object will be passed as-is as
the *user_data* parameter to all of the application's callback functions.  You
can also access the application's *user_data* object using
**crs_application_get_user_data**().

Once you have created the application instance, and registered all of the
necessary callbacks, you must register the application with the local node's
**crs_node**(3) instance.  That allows the node to know which
**crs_application** instance to delegate to when messages with its application
ID are received, and also gives the application access to the overlay network
for sending messages.  **crs_node_add_application**() adds a new application to
the node.  **crs_node_get_application**() returns the **crs_application**
instance for the given application ID.


# CALLBACKS

*receive*

  : Called when the local node receives a message for this application, where
    the local node is the final destination.  See **crs_application_receive**(3)
    for more details.


# RETURN VALUES

**crs_node_add_application**() returns a **CORK_REDEFINED**(3) error if there is
already a registered application with the same ID.

**crs_node_get_application**() returns a **CORK_UNDEFINED**(3) error if there is
no registered application with the requested ID.
